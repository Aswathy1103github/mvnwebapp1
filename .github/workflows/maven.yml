# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - run: pwd
      # - run: mkdir deployment && cp target/*.war deployment
    - uses: actions/upload-artifact@v2 # Copy files from repository to docker container so the next uploadandscan action can access them.
      with:
        path: /home/runner/work/mvnwebapp1/mvnwebapp1/target/mvnwebapp.war # Wildcards can be used to filter the files copied into the container. See: https://github.com/actions/upload-artifact
    - uses: veracode/veracode-uploadandscan-action@master # Run the uploadandscan action. Inputs are described above.
      with:
        filepath: /home/runner/work/mvnwebapp1/mvnwebapp1/target/
        vid: df8fb1b2d88861fa2e81578f91137e19
        vkey: 0915b40a8e9475e542893d26a3aa92f2d38f8577fb1c03a751aae6bba0f4763178ee12c073f26fa9612d4f9266c295c8aed17c2bf907a15b329a1a0433b8267a
    #vid: '${{ secrets.VERACODE_API_ID }}'
    #vkey: '${{ secrets.VERACODE_API_KEY }}'
        createsandbox: 'true'
        sandboxname: 'DevSandboxMVN'
        scantimeout: 15
        exclude: '*.js'
        include: '*.war'
        criticality: 'low'
